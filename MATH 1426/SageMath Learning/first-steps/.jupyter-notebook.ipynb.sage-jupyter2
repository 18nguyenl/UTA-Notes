{"output":{"0":{"evalue":"name 'x' is not defined","ename":"NameError","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-6fcf9dfbd479>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"]}},"exec_count":1,"start":1543816605842,"input":"x","state":"done","pos":7,"cell_type":"code","type":"cell","end":1543816606294,"id":"efdb19","kernel":"anaconda3"}
{"type":"cell","id":"016d05","pos":27,"input":"And here we use a nested loop to calculate a whole bunch of them all at once ...","cell_type":"markdown"}
{"type":"cell","id":"02ab20","pos":32,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"03512e","pos":26,"input":"func1(8, 1)","cell_type":"code","exec_count":0}
{"type":"cell","id":"036852","pos":9,"input":"x + y","cell_type":"code","exec_count":0}
{"type":"cell","id":"03a86d","pos":25,"input":"That's `4 + 2 * 5`. Follow where `a` and `b` are in the function to understand what's going on.\n\nNow, we try another one:","cell_type":"markdown"}
{"type":"cell","id":"0bb652","pos":6,"input":"import numpy as np\nx = np.array([1, 2, 3])\ny = np.array([5, 2.2, -1])","cell_type":"code","exec_count":0}
{"type":"cell","id":"115b0d","pos":3,"input":"Note, the variable `apple` from above still exists in the following cell.\nSuch a definition holds as long as the **session** of the kernel is still active.\n\nRestart the kernel (in the menu: Kernel -> Restart) and wait spawning up a new session.\nYou'll see that evaluating this next cell will result in an error, because `apple` is no longer defined.\n\n`NameError: name 'apple' is not defined`","cell_type":"markdown"}
{"type":"cell","id":"18d67e","pos":21,"input":"Procedural programming's main idea is to define functions for encoding – well – procedures. They're a small \"recipe\" and here is such an example:","cell_type":"markdown"}
{"type":"cell","id":"297a53","pos":14,"input":"Defining a vector $u$ for the x-values and calculating a corresponding vector $v$ for the y-values.","cell_type":"markdown"}
{"type":"cell","id":"29814e","pos":22,"input":"def func1(a, b):\n    result = a + 2*b\n    return result","cell_type":"code","exec_count":0}
{"type":"cell","id":"2daba1","pos":19,"input":"plt.grid()\nplt.plot(u, v)","cell_type":"code","exec_count":0}
{"type":"cell","id":"434f55","pos":30,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"4bb5a4","pos":12,"input":"## Plotting\n\nFamiliarize yourself with the excellent [matplotlib](https://matplotlib.org/) library.","cell_type":"markdown"}
{"type":"cell","id":"52a2c3","pos":29,"input":"---\n\n## Great job!\n\n... and don't worry too much about all the details. This tutorial should make you curious about what CoCalc can do for you :-)\n\nNow, let's go back to [first-steps.tasks](first-steps.tasks).","cell_type":"markdown"}
{"type":"cell","id":"5340eb","pos":8,"input":"y","cell_type":"code","exec_count":0}
{"type":"cell","id":"585d3a","pos":1,"input":"## Simple calculations","cell_type":"markdown"}
{"type":"cell","id":"5932a8","pos":2,"input":"apple = 1.3\napple","cell_type":"code","exec_count":0}
{"type":"cell","id":"71d878","pos":31,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"7b5f6c","pos":11,"input":"x.dot(y)","cell_type":"code","exec_count":0}
{"type":"cell","id":"90f68c","pos":13,"input":"import matplotlib.pyplot as plt","cell_type":"code","exec_count":0}
{"type":"cell","id":"99d6fe","pos":23,"input":"Now, we \"call\" this function named `func1` – containing the recipe to add the first argument to twice the second argument – and show the result","cell_type":"markdown"}
{"type":"cell","id":"9a8ec0","pos":18,"input":"Now, we plot a grid and draw a line through all corresponding x and y values.","cell_type":"markdown"}
{"type":"cell","id":"a3e01d","pos":28,"input":"for i in range(3):\n    for j in range(5):\n        z = func1(i, j)\n        print(\"func1({i}, {j}) = {z}\".format(i = i, j = j, z = z))","cell_type":"code","exec_count":0}
{"type":"cell","id":"a64c29","pos":15,"input":"u = np.linspace(0, 3 * np.pi, 1000)\nv = u * np.sin(u)","cell_type":"code","exec_count":0}
{"type":"cell","id":"a6e932","pos":10,"input":"Dot-product $\\vec{x} \\cdot \\vec{y}$","cell_type":"markdown"}
{"type":"cell","id":"a6f708","pos":20,"input":"## Programming in Python","cell_type":"markdown"}
{"type":"cell","id":"b96426","pos":16,"input":"First 4 values of u and v as (x, y)-coordinates:","cell_type":"markdown"}
{"type":"cell","id":"c5d8b6","pos":0,"input":"# This is a Jupyter Notebook – `*.ipynb`\n\n[Jupyter Notebooks](http://jupyter.org/) are an emerging format for sharing scientific calculations in a standardized document.\nIt is made up of a list of input-cells (usually containing code) and corresponding output cells (containing text and/or graphics).\nThere are also \"Markdown\" cells, like the one you're reading right now, containing formatted text to explain the content.\n\n## Usage\n\nTo **evaluate a cell**, select the input cell (click on it, or put the cursor inside of it), and either press the play-button in the button row or press the `Shift`+`Return` keys.\nUsually, you should be able to go through a full notebook by pressing `Shift`+`Return` for evaluating one cell after another.\nTry it here after reading this introduction!\n\nEach Jupyter Notebook has a corresponding **\"Kernel\"**.\nIt defines the language and back-end you are using when running code in a cell.\nLook at the top right, there it tells you what the current one is!\n\nIn the menu, you can select the \"Kernel\" you want to use.\nFor this notebook here, it needs to be Python 3 by Anaconda.\n\nCoCalc supports the following kernels:\n\n* [Python](https://www.python.org/) -- version 2 and 3.\n* [Anaconda Python](https://www.anaconda.com/what-is-anaconda/)\n* [SageMath](https://www.sagemath.org/)  -- [Tutorial](http://doc.sagemath.org/html/en/tutorial/index.html)\n* [Julia](https://julialang.org/)\n* [R](https://cran.r-project.org)  -- [Getting Started](https://cran.r-project.org/doc/contrib/Lemon-kickstart/)\n* [Octave](https://www.gnu.org/software/octave/)\n* and many more ...\n\n## CoCalc Jupyter Notebooks\n\nOur Jupyter notebooks are an enhanced version of the legacy implementation.\nIn addition to the standard features, we offer concurrent editing (Google Docs style), integrated chat, detailed revision history, and a faster more scalable interface.\n\n## Classical Jupyter Notebook\n\nAs an backwards compatible alternative to CoCalc's Jupyter Notebook implementation,\nthere is also an enhanced version of the classical Jupyter Notebook available.\nIt offers all original functionalities, but has a few technical drawbacks.\nUse it when you require full support of the legacy system.\n\n---\n\nRead [this overview](https://github.com/sagemathinc/cocalc/wiki/JupyterClassicModern) for more information!\n\n","cell_type":"markdown"}
{"type":"cell","id":"c6566e","pos":24,"input":"func1(4, 5)","cell_type":"code","exec_count":0}
{"type":"cell","id":"e2587d","pos":4,"input":"2 * apple + 3 * apple","cell_type":"code","exec_count":0}
{"type":"cell","id":"f50f54","pos":5,"input":"## Linear Algebra\n\nUse [NumPy](http://www.numpy.org/) for working with two three dimensional vectors $\\vec{x}$ and $\\vec{y}$:","cell_type":"markdown"}
{"type":"cell","id":"fa247f","pos":17,"input":"list(zip(u[:4], v[:4]))","cell_type":"code","exec_count":0}
{"type":"file","last_load":1543793219609}
{"type":"settings","kernel":"anaconda3","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.4"}},"kernel_usage":{"cpu":0,"memory":89358336},"kernel_state":"idle","trust":true}